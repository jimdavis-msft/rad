name: Deploy Apps

on:
  workflow_call:
    inputs:
      target-ring:
        required: true
        type: string 
      variables:
        required: true
        type: string   

permissions:
  id-token: write
  contents: read

jobs:
  deploy-apps:
    runs-on: ${{fromJSON(inputs.variables).RunnerLabel }}
    name: Deploy Apps
    steps:
      # LOGIN AZ POWERSHELL
      - uses: azure/login@v1
        with:
          creds: '{"clientId":"${{fromJSON(inputs.variables).RunnerServicePrincipalId }}","clientSecret":"${{ secrets.AZURE_CREDENTIALS }}","subscriptionId":"${{fromJSON(inputs.variables).SubscriptionId }}","tenantId":"${{fromJSON(inputs.variables).TenantId }}"}'
          # client-id: ${{fromJSON(inputs.variables).RunnerServicePrincipalId }}
          # tenant-id: ${{fromJSON(inputs.variables).TenantId }}
          # subscription-id: ${{fromJSON(inputs.variables).SubscriptionId }}
          enable-AzPSSession: true
      # LOGIN AZ CLI
      - uses: azure/login@v1
        with:
          creds: '{"clientId":"${{fromJSON(inputs.variables).RunnerServicePrincipalId }}","clientSecret":"${{ secrets.AZURE_CREDENTIALS }}","subscriptionId":"${{fromJSON(inputs.variables).SubscriptionId }}","tenantId":"${{fromJSON(inputs.variables).TenantId }}"}'
          # client-id: ${{fromJSON(inputs.variables).RunnerServicePrincipalId }}
          # tenant-id: ${{fromJSON(inputs.variables).TenantId }}
          # subscription-id: ${{fromJSON(inputs.variables).SubscriptionId }}

      - uses: actions/checkout@v2
        name: Checkout Repo

      - name: Deploy App Base
        uses: ./.github/actions/AppDeploy/app.deploy.appBase
        with:
          variables: ${{ inputs.variables }}
          target-ring: ${{ inputs.target-ring }}

      # DEPLOY APPS TO AKS WITH COMMON COMPONENTS

      - name: Deploy AKS Ingress Controller
        if: fromJSON(inputs.variables).DeploymentType == 'AKS'
        uses: ./.github/actions/AppDeploy/app.deploy.aks.Ingress
        with:
          variables: ${{ inputs.variables }}
          target-ring: ${{ inputs.target-ring }}


      # DEPLOY APPS TO AKS WITH AKS AND APIM COMPONENTS
      
      - name: Deploy DncApi to APIM
        if: fromJSON(inputs.variables).DeploymentType == 'AKS' && fromJSON(inputs.variables).DeployAPIM == 'true'
        uses: ./.github/actions/AppDeploy/app.deploy.dnc.api.aks
        with:
          variables: ${{ inputs.variables }}
          target-ring: ${{ inputs.target-ring }}

      - name: Deploy DncApi Cert to APIM 
        if: fromJSON(inputs.variables).DeploymentType == 'AKS' && fromJSON(inputs.variables).DeployAPIM == 'true'
        uses: ./.github/actions/Common/importApimCert
        with:
          keyvault-name:  ${{ fromJSON(inputs.variables).KeyVaultName }} 
          resource-group: ${{ fromJSON(inputs.variables).TargetResourceGroupCore }}  
          cert-name: ${{ fromJSON(inputs.variables).DncAuthCertName }} 
          apim-service-name: ${{ fromJSON(inputs.variables).ApiManagementServiceName }} 
          selfsigned: ${{ fromJSON(inputs.variables).SelfSignedCertificate }} 
          dns-name: ${{ fromJSON(inputs.variables).DncApiDnsName }} 

      - name: Deploy NodeApi to APIM
        if: fromJSON(inputs.variables).DeploymentType == 'AKS' && fromJSON(inputs.variables).DeployAPIM == 'true'
        uses: ./.github/actions/AppDeploy/app.deploy.node.api.aks
        with:
          variables: ${{ inputs.variables }}
          target-ring: ${{ inputs.target-ring }}         

      - name: Deploy NodeAPi Cert to APIM 
        if: fromJSON(inputs.variables).deploymenttype == 'AKS' && fromJSON(inputs.variables).DeployAPIM == 'true'
        uses: ./.github/actions/Common/importApimCert
        with:
          keyvault-name:  ${{ fromJSON(inputs.variables).KeyVaultName }} 
          resource-group: ${{ fromJSON(inputs.variables).TargetResourceGroupCore }}  
          cert-name: ${{ fromJSON(inputs.variables).NodeAuthCertName }} 
          apim-service-name: ${{ fromJSON(inputs.variables).ApiManagementServiceName }} 
          selfsigned: ${{ fromJSON(inputs.variables).SelfSignedCertificate }} 
          dns-name: ${{ fromJSON(inputs.variables).NodeApiDnsName }}

      - name: Restart VoteWeb Deployment
        uses: ./.github/actions/Common/restartAksDeployment
        with:
          variables: ${{ inputs.variables }}
          deployment-name: "azure-vote-front"
          replicas: 1
