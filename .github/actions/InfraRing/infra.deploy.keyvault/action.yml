name: "infra.deploy.keyvault"
description: "Deploy keyvault infra"
inputs:
  variables:
    description: "Variables"
    required: true
  target-ring:
    description: "Target Ring"
    required: true
runs:
  using: "composite"
  steps:

    - name: Update Private DNS Zones Parameters File
      uses: ./.github/actions/Common/updateParamFile
      with:
        parameter-file: ${{ github.workspace }}/Parameters/PrivateDnsZones/parameters.json
        variables-file: ${{ github.workspace }}/.github/Variables/Variables-${{ inputs.target-ring }}.env  

    - uses: azure/arm-deploy@v1
      name: Deploy KV Private DNS Zone
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/PrivateDnsZones/deploy.json
        parameters: ${{ github.workspace }}/Parameters/PrivateDnsZones/parameters.json privateDnsZoneName=${{ fromJSON(inputs.variables).kvDnsZoneName }} cuaId=${{ fromJSON(inputs.variables).cuaId }}
        deploymentMode: 'Incremental'
        deploymentName: deployKVPrivateDnsZone-${{ github.run_id }}

    - uses: azure/arm-deploy@v1
      name: Deploy KV Private Endpoints
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/PrivateEndpoints/deploy.json
        parameters: ${{ github.workspace }}/Parameters/PrivateEndpoints/parameters.json privateEndpointName=${{ fromJSON(inputs.variables).KVPrivateEndpointName }} cuaId=${{ fromJSON(inputs.variables).cuaId }} targetSubnetId=${{ fromJSON(inputs.variables).PrivateEndpointTargetSubnetId }} privateDNSId=${{ fromJSON(inputs.variables).KVPrivateEndpointPrivateDNSId }} serviceResourceId=${{ fromJSON(inputs.variables).KVPrivateEndpointServiceResourceId }} groupId="[\"vault\"]"
        deploymentMode: 'Incremental'
        deploymentName: deployKVPrivateEndpoints-${{ github.run_id }}

    - uses: azure/arm-deploy@v1
      name: Create WebApp KeyVault
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/KeyVault/deploy.json
        parameters: ${{ github.workspace }}/Parameters/KeyVault/parameters.json keyVaultName=${{ fromJSON(inputs.variables).KeyVaultName2 }} cuaId=${{ fromJSON(inputs.variables).cuaId }}
        deploymentMode: 'Incremental'
        deploymentName: deployKeyVault-${{ github.run_id }}

    - uses: azure/arm-deploy@v1
      name: Deploy KV2 Private Endpoints
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/PrivateEndpoints/deploy.json
        parameters: ${{ github.workspace }}/Parameters/PrivateEndpoints/parameters.json privateEndpointName=${{ fromJSON(inputs.variables).KV2PrivateEndpointName }} cuaId=${{ fromJSON(inputs.variables).cuaId }} targetSubnetId=${{ fromJSON(inputs.variables).PrivateEndpointTargetSubnetId }} privateDNSId=${{ fromJSON(inputs.variables).KVPrivateEndpointPrivateDNSId }} serviceResourceId=${{ fromJSON(inputs.variables).KV2PrivateEndpointServiceResourceId }} groupId="[\"vault\"]"
        deploymentMode: 'Incremental'
        deploymentName: deployKVPrivateEndpoints-${{ github.run_id }}

    - name: Create WebApp KV Access Policy
      shell: bash
      run: | 
          objectid=$(az keyvault secret show --name objectid --vault-name ${{ fromJSON(inputs.variables).KeyVaultName }} --query "value" --output tsv)
          echo "The ObjectId output is: ${objectid}"
          az keyvault set-policy --name ${{ fromJSON(inputs.variables).keyvaultname2 }} --object-id $objectid --certificate-permissions all --secret-permissions all --key-permissions all

    - name: Create Runner KV Access Policy
      shell: bash
      run: | 
          echo "The clientid is: ${{ fromJSON(inputs.variables).RunnerServicePrincipalId }}"
          echo "The keyvault is: ${{ fromJSON(inputs.variables).keyvaultname2 }}"
          az keyvault set-policy --name ${{ fromJSON(inputs.variables).keyvaultname2 }} --spn ${{ fromJSON(inputs.variables).RunnerServicePrincipalId }} --certificate-permissions all --secret-permissions all --key-permissions all

    - name: Assign Runner Key Vault Secrets Officer Role
      shell: bash
      run: | 
          vaultid=$(az keyvault show --name ${{ fromJSON(inputs.variables).KeyVaultName }} --query id --output tsv)
          roleid="b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
          echo "The vaultid output is: ${vaultid}"
          echo "the roleid variable is: ${roleid}"
          az role assignment create --role $roleid --assignee ${{ fromJSON(inputs.variables).RunnerServicePrincipalId }} --scope $vaultid
