name: "infra.deploy.appService"
description: "Deploy App Service"
inputs:
  variables:
    description: "Variables"
    required: true
  target-ring:
    description: "Target Ring"
    required: true
runs:
  using: "composite"
  steps:

    - name: Update Hub vNet Parameters File
      uses: ./.github/actions/Common/updateParamFile
      with:
        parameter-file: ${{ github.workspace }}/Parameters/PrivateDnsZones/parameters.json
        variables-file: ${{ github.workspace }}/.github/Variables/Variables-${{ inputs.target-ring }}.env 

    - uses: azure/arm-deploy@v1
      name: Deploy Web App Private DNS Zone
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/PrivateDnsZones/deploy.json
        parameters: ${{ github.workspace }}/Parameters/PrivateDnsZones/parameters.json privateDnsZoneName=${{ fromJSON(inputs.variables).webAppDnsZoneName }} cuaId=${{ fromJSON(inputs.variables).cuaId }}
        deploymentMode: 'Incremental'
        deploymentName: deployWebAppPrivateDnsZones-${{ github.run_id }}

    - uses: azure/arm-deploy@v1
      name: Create Azure App Service Plan
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/AppServicePlan/deploy.json
        parameters: ${{ github.workspace }}/Parameters/AppServicePlan/parameters.json appServicePlanName=${{ fromJSON(inputs.variables).appServicePlanName }} cuaId=${{ fromJSON(inputs.variables).cuaId }}
        deploymentMode: 'Incremental'
        deploymentName: deployAzureWebAppPlan-${{ github.run_id }}

    - name: Assert if Node Web App Needs to be Deployed
      uses: Azure/powershell@v1
      id: GetWebApp_node
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        # Specify the Az PowerShell script here.
        inlineScript: ${{ github.workspace }}/Scripts/Get-WebApp.ps1 -AppName ${{ fromJSON(inputs.variables).WebAppName }}-node -ResourceGroupName ${{ fromJSON(inputs.variables).TargetResourceGroupCore }} -GitHub
        azPSVersion: "latest"

    - uses: azure/arm-deploy@v1
      name: Create Node Web App
      if: (fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both') && steps.GetWebApp_node.outputs.WebAppExist != 'true'
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/WebApp/deploy.json
        parameters: ${{ github.workspace }}/Parameters/WebApp/parameters.json webAppName=${{ fromJSON(inputs.variables).WebAppName }}-node cuaId=${{ fromJSON(inputs.variables).cuaId }} appServicePlanId=${{ fromJSON(inputs.variables).AppPlanResourceId }}
        deploymentMode: 'Incremental'
        deploymentName: deployAzureWebAppPlan-${{ github.run_id }}

    - name: Grant Node App rights to ACR
      uses: Azure/powershell@v1
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        inlineScript: ${{ github.workspace }}/Scripts/Set-WebAppPullAcr.ps1 -WebAppName ${{ fromJSON(inputs.variables).WebAppName }}-node -ResourceGroupName ${{ fromJSON(inputs.variables).TargetResourceGroupCore }} -ACRName ${{ fromJSON(inputs.variables).ACRName }}
        azPSVersion: "latest"

    - uses: azure/arm-deploy@v1
      name: Node Web App Deploy Private Endpoints
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/PrivateEndpoints/deploy.json
        parameters: ${{ github.workspace }}/Parameters/PrivateEndpoints/parameters.json privateEndpointName=${{ fromJSON(inputs.variables).WebAppPrivateEndPointName }} cuaId=${{ fromJSON(inputs.variables).cuaId }} targetSubnetId=${{ fromJSON(inputs.variables).PrivateEndpointTargetSubnetId }} privateDNSId=${{ fromJSON(inputs.variables).WebAppPrivateEndpointPrivateDNSId }} serviceResourceId=${{ fromJSON(inputs.variables).WebAppPrivateEndpointServiceResourceId }} groupId="[\"sites\"]"
        deploymentMode: 'Incremental'
        deploymentName: deployPrivateEndpoints-${{ github.run_id }}

    - name: Assert if Voting Web App Needs to be Deployed
      uses: Azure/powershell@v1
      id: GetWebApp_vote
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        inlineScript: ${{ github.workspace }}/Scripts/Get-WebApp.ps1 -AppName ${{ fromJSON(inputs.variables).WebAppName }} -ResourceGroupName ${{ fromJSON(inputs.variables).TargetResourceGroupCore }}
        azPSVersion: "latest"

    - uses: azure/arm-deploy@v1
      name: Create Vote Web App
      if: (fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both') && steps.GetWebApp_vote.outputs.WebAppExist != 'true'
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        # Figure out paths
        template: ${{ github.workspace }}/ARM/WebApp/deploy.json
        parameters: ${{ github.workspace }}/Parameters/WebApp/parameters.json webAppName=${{ fromJSON(inputs.variables).WebAppName }} cuaId=${{ fromJSON(inputs.variables).cuaId }} appServicePlanId=${{ fromJSON(inputs.variables).AppPlanResourceId }}
        deploymentMode: 'Incremental'
        deploymentName: deployAzureWebAppPlan-${{ github.run_id }}

    - name: Grant Vote App rights to ACR
      uses: Azure/powershell@v1
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        inlineScript: ${{ github.workspace }}/Scripts/Set-WebAppPullAcr.ps1 -WebAppName ${{ fromJSON(inputs.variables).WebAppName }} -ResourceGroupName ${{ fromJSON(inputs.variables).TargetResourceGroupCore }} -ACRName ${{ fromJSON(inputs.variables).ACRName }}
        azPSVersion: "latest"

    # TODO ENABLE PRIVATE END POINTS
    - uses: azure/arm-deploy@v1
      name: Vote Web App Deploy Private Endpoints
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        scope: resourcegroup
        region: ${{fromJSON(inputs.variables).TargetRegion }}
        resourceGroupName: ${{fromJSON(inputs.variables).TargetResourceGroupCore }}
        template: ${{ github.workspace }}/ARM/PrivateEndpoints/deploy.json
        parameters: ${{ github.workspace }}/Parameters/PrivateEndpoints/parameters.json privateEndpointName=${{ fromJSON(inputs.variables).WebAppPrivateEndPointName }} cuaId=${{ fromJSON(inputs.variables).cuaId }} targetSubnetId=${{ fromJSON(inputs.variables).PrivateEndpointTargetSubnetId }} privateDNSId=${{ fromJSON(inputs.variables).WebAppPrivateEndpointPrivateDNSId }} serviceResourceId=${{ fromJSON(inputs.variables).WebAppPrivateEndpointServiceResourceId }} groupId="[\"sites\"]"
        deploymentMode: 'Incremental'
        deploymentName: deployPrivateEndpoints-${{ github.run_id }}

    - name: Add IPs to ACR FW
      uses: Azure/powershell@v1
      if: fromJSON(inputs.variables).DeploymentType == 'WebApp' || fromJSON(inputs.variables).DeploymentType == 'Both'
      with:
        inlineScript: ${{ github.workspace }}/Scripts/Set-AcrFirewall.ps1 -ACRName ${{ fromJSON(inputs.variables).ACRName }} -ResourceGroupName ${{ fromJSON(inputs.variables).TargetResourceGroupCore }}
        azPSVersion: "latest"